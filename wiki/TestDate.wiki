 // --------------------------
// projects/date/TestDate.c++
// Copyright (C) 2010
// Glenn P. Downing
// Modified by Arasi Aravindhan
//             Egboh Chinedu
// --------------------------

/*
To test the program:
    % g++ -ansi -pedantic -lcppunit -ldl -Wall TestDate.c++ -o 
TestDate.app
    % valgrind TestDate.app >& TestDate.out
*/

// --------
// includes
// --------

#include <cstring>   // strcmp
#include <sstream>   // ostringstream
#include <stdexcept> // invalid_argument
#include <string>    // ==

#include "cppunit/extensions/HelperMacros.h" // CPPUNIT_TEST, CPPUNIT_TEST_SUITE, CPPUNIT_TEST_SUITE_END
#include "cppunit/TestFixture.h"             // TestFixture
#include "cppunit/TestSuite.h"               // TestSuite
#include "cppunit/TextTestRunner.h"          // TestRunner

#include "Date.h"

// --------
// TestDate
// --------

struct TestDate : CppUnit::TestFixture {
    // ----------------
    // test_constructor
    // ----------------

    void test_constructor () {
        try {
            const Date<int> x(0, 1, 1600);
            CPPUNIT_ASSERT(false);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::Date()") == 0);}}
            
    void test_constructor_1 () {
                try {
                        const Date<int> x(1, 1, 1600);
                        CPPUNIT_ASSERT(true);}
           catch (std::invalid_argument& e) {
              CPPUNIT_ASSERT(false);}}
              
    void test_constructor_2 () {
                try {
                        const Date<int> x(29, 2, 2000);
                        CPPUNIT_ASSERT(true);}
                catch (std::invalid_argument& e) {
                        CPPUNIT_ASSERT(false);}}
                        
    void test_constructor_3 () {
                try {
                        const Date<int> x(29, 2, 1999);
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
                        CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::Date()") == 0);}}
                        
    void test_constructor_4 () {
                try {
                        const Date<int> x(31, 3, 4545);
                        CPPUNIT_ASSERT(true);}
                catch (std::invalid_argument& e) {
                        CPPUNIT_ASSERT(false);}}
                        
    void test_constructor_5 () {
                try {
                        const Date<int> x(31, 4, 4884);
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
                        CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::Date()") == 0);}}
 void test_constructor_6 () {
                try {
                        const Date<int> x(29, 2, 2100);
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
                        CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::Date()") == 0);}}
  void test_constructor_7 () {
                try {
                        const Date<int> x(29, 2, 3000);
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
                        CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::Date()") == 0);}}
                        
   
              
    // -------------
    // test_equal_to
    // -------------

    void test_equal_to_1 () {
        try {
            const Date<int> x(28, 2, 2000);
            const Date<int> y(28, 2, 2000);
            CPPUNIT_ASSERT(x == y);
            CPPUNIT_ASSERT(!(x != y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_equal_to_2 () {
        try {
            const Date<int> x(29, 12, 4000);
            const Date<int> y(29, 12, 4000);
            CPPUNIT_ASSERT(x == y);
            CPPUNIT_ASSERT(!(x != y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_equal_to_3 () {
        try {
            const Date<int> x(10, 11, 1999);
            const Date<int> y(10, 11, 1999);
            CPPUNIT_ASSERT(x == y);
            CPPUNIT_ASSERT(!(x != y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_equal_to_4 () {
        try {
            const Date<int> x(31, 12, 1602);
            const Date<int> y(31, 12, 1602);
            CPPUNIT_ASSERT(x == y);
            CPPUNIT_ASSERT(!(x != y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_equal_to_5 () {
        try {
            const Date<int> x(1, 1, 1600);
            const Date<int> y(1, 1, 1600);
            CPPUNIT_ASSERT(x == y);
            CPPUNIT_ASSERT(!(x != y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}            
    // ---------
    // test_less
    // ---------

    void test_less_1 () {
        try {
            const Date<int> x(27, 2, 2000);
            const Date<int> y(28, 2, 2000);
            CPPUNIT_ASSERT(x <  y);
            CPPUNIT_ASSERT(x <= y);
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT(!(x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_less_2 () {
        try {
            const Date<int> x(15, 2, 1600);
            const Date<int> y(1, 4, 4645);
            CPPUNIT_ASSERT(x <  y);
            CPPUNIT_ASSERT(x <= y);
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT(!(x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_less_3 () {
        try {
            const Date<int> x(16, 7, 1998);
            const Date<int> y(18, 8, 1998);
            CPPUNIT_ASSERT(x <  y);
            CPPUNIT_ASSERT(x <= y);
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT(!(x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_less_4 () {
        try {
            const Date<int> x(15, 6, 4445);
            const Date<int> y(15, 6, 4446);
            CPPUNIT_ASSERT(x <  y);
            CPPUNIT_ASSERT(x <= y);
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT(!(x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_less_5 () {
        try {
            const Date<int> x(14, 1, 17544);
            const Date<int> y(12, 11, 17544);
            CPPUNIT_ASSERT(x <  y);
            CPPUNIT_ASSERT(x <= y);
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT(!(x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    
    void test_less_6 () {
        try {
            const Date<int> x(1, 1, 1600);
            const Date<int> y(1, 1, 1600);
            CPPUNIT_ASSERT(!(x <  y));
            CPPUNIT_ASSERT((x <= y));
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT((x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    
    void test_less_7 () {
        try {
            const Date<int> x(1, 1, 2010);
            const Date<int> y(2, 1, 2010);
            CPPUNIT_ASSERT(x <  y);
            CPPUNIT_ASSERT(x <= y);
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT(!(x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_less_8 () {
        try {
            const Date<int> x(1, 1, 2000010);
            const Date<int> y(2, 1, 2000010);
            CPPUNIT_ASSERT(x <  y);
            CPPUNIT_ASSERT(x <= y);
            CPPUNIT_ASSERT(!(x >  y));
            CPPUNIT_ASSERT(!(x >= y));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    // ---------
    // test_plus
    // ---------

    void test_plus () {
        try {
            const Date<int> x(1, 1, 2000);
            const Date<int> y(1, 1, 2001);
            CPPUNIT_ASSERT(x + 366 == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_plus_1 () {
        try {
            const Date<int> x(1, 1, 1600);
            CPPUNIT_ASSERT(x + 0 == x);}
        catch (std::invalid_argument& e) { 
            CPPUNIT_ASSERT(false);}}

    void test_plus_2 () {
        try {
            const Date<int> x(1, 3, 5411); 
                        const Date<int> y(28, 2, 5411);
            CPPUNIT_ASSERT(x + (-1) == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_plus_3 () {
        try {
            const Date<int> x(31, 12, 2000); 
                        const Date<int> y(1, 1, 2001);
            CPPUNIT_ASSERT(x + 1 == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_plus_4 () {
        try {
            const Date<int> x(1, 1, 1600); 
            CPPUNIT_ASSERT(x + 1 != x);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    

    void test_plus_6 () {
        try {
            const Date<int> x(1, 1, 1600);
            x + 1; 
                        const Date<int> y(1, 1, 1600);
            CPPUNIT_ASSERT(x == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_plus_7 () {
        try {
            const Date<int> x(12, 3, 1997); 
                        const Date<int> y(12, 3, 1999);
            CPPUNIT_ASSERT(x + 730 == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_plus_8 () {
        try {
            const Date<int> x(14, 10, 4545); 
                        const Date<int> y(14, 12, 4545);
            CPPUNIT_ASSERT(x + 61 == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_plus_9 () {
        try {
            Date<int> x(21, 2, 1887); 
                        const Date<int> y(21, 2, 1888);
                        Date<int>& z = x;
                        z += 365;
            CPPUNIT_ASSERT(x == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_plus_10 () {
        try {
            const Date<int> x(1, 1, 1600); 
                        const Date<int> y(31, 1, 1600);
            CPPUNIT_ASSERT(x + 30 == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_plus_11 () {
        try {
            const Date<int> x(1, 1, 1600); 
                        const Date<int> y(31, 1, 1600);
            CPPUNIT_ASSERT(30 + x == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_plus_12 () {
        try {
            const Date<int> x(1, 1, 1600); 
                        const Date<int> y(1, 1, 1601);
            CPPUNIT_ASSERT(366 + x == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_plus_13 () {
        try {
            const Date<int> x(5, 4, 1997); 
                        const Date<int> y(1, 4, 1997);
            CPPUNIT_ASSERT((-4) + x == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_plus_14 () {
        try {
            const Date<int> x(17, 8, 1777); 
                        const Date<int> y(17, 8, 1778);
            CPPUNIT_ASSERT(365 + x == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_plus_15 () {
        try {
            const Date<int> x(27, 9, 1801); 
                        const Date<int> y(27, 9, 1801);
            CPPUNIT_ASSERT(0 + x == y);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_plus_16 () {
                try {
                        Date<int> x(1, 1, 1600);
                        Date<int>& y = x;
                        y += -1;
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::operator +=()") == 0);}}
            

      void test_plus_17 () {
                try {
                        Date<int> x(31, 1, 1600);
                        Date<int>& y = x;
                        y += -35;
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::operator +=()") == 0);}}
           

            
    


    // ----------
    // test_minus
    // ----------

    void test_minus_1 () {
        try {
            const Date<int> x(1, 1, 2000);
            const Date<int> y(1, 1, 2001);
            CPPUNIT_ASSERT(y - 366 == x);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_minus_2 () {
        try {
            const Date<int> x(12, 1, 1604);
            const Date<int> y(21, 1, 1604);
            CPPUNIT_ASSERT(y - 9 == x);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_minus_3 () {
        try {
            const Date<int> x(1, 1, 2001);
            const Date<int> y(1, 1, 2000);
            CPPUNIT_ASSERT(y - (-366) == x);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_minus_4 () {
        try {
            const Date<int> x(1, 1, 1967);
            const Date<int> y(1, 1, 1967);
            CPPUNIT_ASSERT(y - 0 == x);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_minus_5 () {
        try {
            const Date<int> x(1, 1, 2000);
            const Date<int> y(1, 1, 2000);
            y - 1;
            CPPUNIT_ASSERT(y == x);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_minus_6 () {
        try {
            const Date<int> x(1, 1, 2000);
            const Date<int> y(1, 1, 2000);
            CPPUNIT_ASSERT(y - x == 0);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_minus_7 () {
        try {
            const Date<int> x(1, 1, 2001);
            const Date<int> y(1, 1, 2000);
            CPPUNIT_ASSERT(x - y == 366);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_minus_8 () {
        try {
            const Date<int> x(1, 1, 2000);
            const Date<int> y(1, 1, 2001);
            CPPUNIT_ASSERT(x - y == -366);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_minus_9 () {
        try {
            const Date<int> x(12, 1, 2000);
            const Date<int> y(15, 1, 2000);
            CPPUNIT_ASSERT(y - x == 3);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_minus_10 () {
        try {
            const Date<int> x(5, 1, 2000);
            const Date<int> y(5, 1, 1999);
            CPPUNIT_ASSERT(x - y == 365);}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
            
    void test_minus_11 () {
                try {
                        Date<int> x(1, 1, 1600);
                        Date<int>&y = x;
                        y -= 1;
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::operator -=()") == 0);}}
   
   void test_minus_12 () {
                try {
                        Date<int> x(31, 1, 1600);
                        Date<int>&y = x;
                        y -= 31;
                        CPPUNIT_ASSERT(false);}
                catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(std::strcmp(e.what(), "Date::operator -=()") == 0);}}
   
     

    // -----------
    // test_output
    // -----------

    void test_output_1 () {
        try {
            const Date<int> x(16, 6, 2008);
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "16 Jun 2008");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_output_2 () {
        try {
            const Date<int> x(1, 1, 1999);
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "1 Jan 1999");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_output_3 () {
        try {
            const Date<int> x(27, 12, 1602);
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "27 Dec 1602");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_output_4 () {
        try {
            const Date<int> x(4, 7, 1776);
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "4 Jul 1776");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_output_5 () {
        try {
            const Date<int> x(29, 2, 2004);
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "29 Feb 2004");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

     void test_output_6 () {
        try {
            const Date<int> x(29, 12, 2004);
            std::ostringstream out;
            out << x;
            CPPUNIT_ASSERT(out.str() == "29 Dec 2004");}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}


    // --------------
    // test_leap_year
    // --------------

    void test_leap_year_1 () {
        try {
            CPPUNIT_ASSERT(Date<int>(1, 1, 2000).leap_year());}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_leap_year_2 () {
        try {
            CPPUNIT_ASSERT(!(Date<int>(1, 1, 1999).leap_year()));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_leap_year_3 () {
        try {
            CPPUNIT_ASSERT(Date<int>(1, 1, 2004).leap_year());}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_leap_year_4 () {
        try {
            CPPUNIT_ASSERT(!(Date<int>(1, 1, 2100).leap_year()));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}

    void test_leap_year_5 () {
        try {
            CPPUNIT_ASSERT(Date<int>(1, 1, 2400).leap_year());}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
     void test_leap_year_6 () {
        try {
            CPPUNIT_ASSERT(!(Date<int>(1, 1, 1700).leap_year()));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
      void test_leap_year_7 () {
        try {
            CPPUNIT_ASSERT(!(Date<int>(1, 1, 1800).leap_year()));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
       void test_leap_year_8 () {
        try {
            CPPUNIT_ASSERT(!(Date<int>(1, 1, 1900).leap_year()));}
        catch (std::invalid_argument& e) {
            CPPUNIT_ASSERT(false);}}
    
    
    // -----
    // suite
    // -----

    CPPUNIT_TEST_SUITE(TestDate);
    CPPUNIT_TEST(test_constructor);
    CPPUNIT_TEST(test_constructor_1);
    CPPUNIT_TEST(test_constructor_2);
    CPPUNIT_TEST(test_constructor_3);
         CPPUNIT_TEST(test_constructor_4);
         CPPUNIT_TEST(test_constructor_5);
         CPPUNIT_TEST(test_constructor_6);
         CPPUNIT_TEST(test_constructor_7);
    CPPUNIT_TEST(test_equal_to_1);
    CPPUNIT_TEST(test_equal_to_2);
    CPPUNIT_TEST(test_equal_to_3);
    CPPUNIT_TEST(test_equal_to_4);
    CPPUNIT_TEST(test_equal_to_5);
    CPPUNIT_TEST(test_less_1);
    CPPUNIT_TEST(test_less_2);
    CPPUNIT_TEST(test_less_3);
    CPPUNIT_TEST(test_less_4);
    CPPUNIT_TEST(test_less_5);
     CPPUNIT_TEST(test_less_6);
      CPPUNIT_TEST(test_less_7);
       CPPUNIT_TEST(test_less_8);
    CPPUNIT_TEST(test_plus);
    CPPUNIT_TEST(test_plus_1);
    CPPUNIT_TEST(test_plus_2);
         CPPUNIT_TEST(test_plus_3);
         CPPUNIT_TEST(test_plus_4);
        // CPPUNIT_TEST(test_plus_5);
         CPPUNIT_TEST(test_plus_6);
         CPPUNIT_TEST(test_plus_7);
         CPPUNIT_TEST(test_plus_8);
         CPPUNIT_TEST(test_plus_9);
         CPPUNIT_TEST(test_plus_10);
         CPPUNIT_TEST(test_plus_11);
         CPPUNIT_TEST(test_plus_12);
         CPPUNIT_TEST(test_plus_13);
         CPPUNIT_TEST(test_plus_14);
         CPPUNIT_TEST(test_plus_15);
         CPPUNIT_TEST(test_plus_16);
         CPPUNIT_TEST(test_plus_17);
    CPPUNIT_TEST(test_minus_1);
    CPPUNIT_TEST(test_minus_2);
    CPPUNIT_TEST(test_minus_3);
    CPPUNIT_TEST(test_minus_4);
    CPPUNIT_TEST(test_minus_5);
         CPPUNIT_TEST(test_minus_6);
         CPPUNIT_TEST(test_minus_7);
         CPPUNIT_TEST(test_minus_8);
         CPPUNIT_TEST(test_minus_9);
         CPPUNIT_TEST(test_minus_10);
         CPPUNIT_TEST(test_minus_11);
         CPPUNIT_TEST(test_minus_12);
    CPPUNIT_TEST(test_output_1);
    CPPUNIT_TEST(test_output_2);
    CPPUNIT_TEST(test_output_3);
    CPPUNIT_TEST(test_output_4);
    CPPUNIT_TEST(test_output_5);
    CPPUNIT_TEST(test_output_6);
    CPPUNIT_TEST(test_leap_year_1);
    CPPUNIT_TEST(test_leap_year_2);
    CPPUNIT_TEST(test_leap_year_3);
    CPPUNIT_TEST(test_leap_year_4);
    CPPUNIT_TEST(test_leap_year_5);
    
    CPPUNIT_TEST_SUITE_END();};

// ----
// main
// ----

int main () {
    using namespace std;
    ios_base::sync_with_stdio(false);  // turn off synchronization with C I/O
    cout << "TestDate.c++" << endl;

    CppUnit::TextTestRunner tr;
    tr.addTest(TestDate::suite());
    tr.run();

    cout << "Done." << endl;
    return 0;}